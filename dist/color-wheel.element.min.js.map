{
  "version": 3,
  "sources": ["esm/geometry.js", "esm/observe-css-var.feature.js", "esm/color-wheel.element.html.generated.js", "esm/color-wheel.element.css.generated.js", "esm/color-wheel.element.js"],
  "sourcesContent": ["/**\n * @param {Point} point1 - target point\n * @param {Point} point2 - the other point\n * @returns {number} distance between `point1` and `point2`\n */\nexport const calculateDistanceBetween2Points = ({ x: x1, y: y1 }, { x: x2, y: y2 }) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\nexport const CircleInfo = {\n  /**\n   * @param {Rect} rect - bounding box to fill the disk\n   * @param {number} innerRadiusPerc - The `Disk` inner circle radius percentage, or the hole radius percentage\n   * @returns {Disk} built `Disk` object\n   */\n  fromRectWithPercentInnerRadius (rect, innerRadiusPerc) {\n    const { x, y, width, height } = rect\n    const radius = Math.min(width, height) / 2\n    const innerRadius = (innerRadiusPerc * 0.01) * radius\n    const center = { x: x + width / 2, y: y + height / 2 }\n    return { innerRadiusPerc, radius, innerRadius, center }\n  },\n  /**\n   * @param {Rect} rect - bounding box to fill the disk\n   * @param {number} innerRadius - The `Disk` inner circle radius, or the hole radius\n   * @returns {Disk} built `Disk` object\n   */\n  fromRectWithInnerRadius (rect, innerRadius) {\n    const { x, y, width, height } = rect\n    const radius = Math.min(width, height) / 2\n    const innerRadiusPerc = innerRadius * 100 / radius\n    const center = { x: x + width / 2, y: y + height / 2 }\n    return { innerRadiusPerc, radius, innerRadius, center }\n  },\n}\n\n/**\n * @typedef {object} Point\n * An object that represents a 2D point in a coordinate system\n * @property {number} x - the `x` coordinate of the `Point`\n * @property {number} y - the `y` coordinate of the `Point`\n */\n\n/**\n * @typedef {object} Rect\n * An object that represents rectange\n * @property {number} x - The `x` coordinate of the `Rect`'s origin point (typically the top-left corner of the rectangle).\n * @property {number} y - The `y` coordinate of the `Rect`'s origin point (typically the top-left corner of the rectangle).\n * @property {number} width - The width of the `Rect`.\n * @property {number} height - The width of the `Rect`.\n */\n\n/**\n * @typedef {object} Disk\n * An object that represents a circle with an hole in the center\n * @property {number} radius - The `Disk` outer circle radius\n * @property {Point} center - The coordinates of the `Disk` center\n * @property {number} innerRadius - The `Disk` inner circle radius, or the hole radius\n * @property {number} innerRadiusPerc - relative percentage of `innerRadius` compared to `radius`\n */\n", "/**\n * All observers information are saved here\n * @type {WeakMap<HTMLElement, ObserverOption[]>}\n */\nconst observerOptionsMap = new WeakMap()\n\nconst resizeObserver = new ResizeObserver(entries => {\n  const targets = new Set(entries.map(entry => entry.target))\n  for (const target of targets) {\n    const rootNode = target.getRootNode()\n    if (!(rootNode instanceof ShadowRoot)) { continue }\n    const host = rootNode.host\n    if (!(host instanceof HTMLElement)) { continue }\n    const options = observerOptionsMap.get(host)\n    options && options.forEach(option => {\n      const computedStyle = getComputedStyle(host)\n      const newValue = cleanPropertyValue(computedStyle.getPropertyValue(option.customPropertyName))\n      if (option.currentPropertyValue !== newValue) {\n        const callbackOptions = {\n          target: host,\n          previousValue: option.currentPropertyValue,\n          value: newValue,\n        }\n        option.currentPropertyValue = newValue\n        option.handler(callbackOptions)\n      }\n    })\n  }\n})\n\n/**\n * @param {string} name - css custom property name\n * @returns {string} css class name of observer\n */\nconst observerClassName = (name) => `css-watch-observer__${name}`\n\n/**\n * @param {string} name - css custom property name\n * @returns {string} css class name of observer's resize target\n */\nconst observerTargetClassName = (name) => `${observerClassName(name)}--target`\n\n/**\n * {@link cssPropertyTemplate} memoization cache\n * @type {{[name: string]: HTMLTemplateElement}}\n */\nconst templateCache = {}\n\n/**\n * @param {string} name - css property name\n * @returns {HTMLTemplateElement} template\n */\nfunction cssPropertyTemplate (name) {\n  if (!templateCache[name]) {\n    const template = document.createElement('template')\n    const className = observerClassName(name)\n    const targetClassName = observerTargetClassName(name)\n    template.innerHTML = `<style class=\"${className}\">.${targetClassName} {visibility:hidden;position:absolute;pointer-events:none}.${targetClassName}::before {content:var(${name})}</style><span class=\"${className} ${targetClassName}\"></span>`\n    templateCache[name] = template\n  }\n\n  return templateCache[name]\n}\n\n/**\n * Creates an CSS variable observer\n * @param {string} customPropertyName - custom property name to observe\n * @param {ObserverCallback} callback - observer change callback handler\n * @returns {Observer} created observer\n */\nexport function shadowDomCustomCssVariableObserver (customPropertyName, callback) {\n  const template = cssPropertyTemplate(customPropertyName)\n  const className = observerClassName(customPropertyName)\n  const targetClassName = observerTargetClassName(customPropertyName)\n  return {\n    observe: (element) => {\n      const observerOptions = observerOptionsMap.get(element) || []\n      const observerOptionsWithName = observerOptions.filter(option => option.customPropertyName === customPropertyName)\n\n      if (observerOptionsWithName.length <= 0) {\n        element.shadowRoot?.append(document.importNode(template.content, true))\n        const elementToObserve = element.shadowRoot?.querySelector(`.${targetClassName}`)\n        elementToObserve && resizeObserver.observe(elementToObserve)\n      }\n\n      observerOptionsMap.set(element, [...observerOptions, {\n        currentPropertyValue: cleanPropertyValue(getComputedStyle(element).getPropertyValue(customPropertyName)),\n        handler: callback,\n        customPropertyName,\n      }])\n    },\n\n    unobserve: (element) => {\n      const observerOptions = observerOptionsMap.get(element) || []\n      const newObserverOptions = observerOptions.filter(option => option.handler !== callback || option.customPropertyName !== customPropertyName)\n      const newObserverOptionsWithName = newObserverOptions.filter(option => option.customPropertyName === customPropertyName)\n      if (newObserverOptionsWithName.length <= 0) {\n        const elementToObserve = element.shadowRoot?.querySelector(`.${targetClassName}`)\n        elementToObserve && resizeObserver.unobserve(elementToObserve)\n        element.shadowRoot?.querySelectorAll(`.${className}`).forEach(el => el.remove())\n      }\n      observerOptionsMap.set(element, newObserverOptions)\n    },\n  }\n}\n\nconst TRIM_QUOTES_REGEX = /^[\"'](.+(?=[\"']$))[\"']$/\n\n/**\n * Cleans custom property value, they are strings, so the quotes are included.\n * This function simply converts CSS string value to JS string\n * @param {string} propValue - CSS value\n * @returns {string} CSS string value as JS string\n */\nexport function cleanPropertyValue (propValue) {\n  if (typeof propValue !== 'string') {\n    return ''\n  }\n  const trimmed = propValue.trim()\n  return trimmed.replace(TRIM_QUOTES_REGEX, '$1')\n}\n\n/**\n * @typedef {object} ObserverOption\n * @property {ObserverCallback} handler - observer change callback handler\n * @property {string} currentPropertyValue - current value of CSS custom property\n * @property {string} customPropertyName - observing CSS custom property\n */\n\n/**\n * @callback ObserverCallback\n * @param {ObserverEvent} event\n */\n\n/**\n * @typedef {object} ObserverEvent\n * @property {HTMLElement} target - observing element\n * @property {string} previousValue - previous value\n * @property {string} value - updated value\n */\n\n/**\n * @typedef {object} Observer\n * @property {(element: HTMLElement) => void} observe - observe an element\n * @property {(element: HTMLElement) => void} unobserve - unobserve an element\n */\n", "// generated code from src/color-wheel.element.html\nvar stdin_default = \"<div class=container><div class=color-wheel-container><div class=inner-radius-calc></div><div class=color-wheel></div><div class=slider-container><div class=slider-track></div><div class=slider-container-half><div class=slider role=slider></div></div></div></div></div>\";\nexport {\n  stdin_default as default\n};\n", "// generated code from src/color-wheel.element.css\nvar stdin_default = ':host{color-scheme:only light;display:inline-flex;justify-content:center;align-items:center;--inner-radius: var(--color-wheel-inner-radius, 60%);--radius: 5cm;min-height:calc(2 * var(--radius) + 2* var(--thumb-radius) + 12px);--thumb-radius: var(--color-wheel-thumb-radius-mobile, var(--color-wheel-thumb-radius, .6cm));--hue: 0;--value: 100;--lightness: 50;--saturation: 100;--default-ui-mode: \"desktop\" }:host([rotate-wheel]){--ui-mode: \"mobile\" }@media only screen and (min-device-width : 320px) and (max-device-width : 480px){:host{--default-ui-mode: \"mobile\" }}.container{position:relative;display:inline-block;overflow:hidden;width:100%;height:100%;box-sizing:border-box;padding:calc(var(--thumb-radius) + 6px)}.container--desktop-ui{--inner-radius: var(--color-wheel-inner-radius, .1%);--thumb-radius: var(--color-wheel-thumb-radius-desktop, var(--color-wheel-thumb-radius, .5cm))}.color-wheel-container{width:100%;height:100%;min-height:calc(2 * var(--radius));min-width:calc(2 * var(--radius));display:inline-block;position:relative}.color-wheel,.slider-container{position:absolute;inset:0}.color-wheel{--l-color: calc(var(--value) * .5%);--center-l-color: calc(var(--value) * 1%);pointer-events:auto;display:inline-block;touch-action:none;border-radius:50%;background:radial-gradient(circle closest-side at center,hsl(0 0% var(--center-l-color)) var(--inner-radius),transparent 100%),conic-gradient(hsl(360 100% var(--l-color)),hsl(345 100% var(--l-color)),hsl(330 100% var(--l-color)),hsl(315 100% var(--l-color)),hsl(300 100% var(--l-color)),hsl(285 100% var(--l-color)),hsl(270 100% var(--l-color)),hsl(255 100% var(--l-color)),hsl(240 100% var(--l-color)),hsl(225 100% var(--l-color)),hsl(210 100% var(--l-color)),hsl(195 100% var(--l-color)),hsl(180 100% var(--l-color)),hsl(150 100% var(--l-color)),hsl(135 100% var(--l-color)),hsl(120 100% var(--l-color)),hsl(105 100% var(--l-color)),hsl(90 100% var(--l-color)),hsl(60 100% var(--l-color)),hsl(45 100% var(--l-color)),hsl(30 100% var(--l-color)),hsl(15 100% var(--l-color)),hsl(0 100% var(--l-color)));mask-image:radial-gradient(circle closest-side at center,transparent calc(var(--inner-radius) - 1px),white var(--inner-radius),white calc(100% - 1px),transparent 100%);-webkit-mask-image:radial-gradient(circle closest-side at center,transparent calc(var(--inner-radius) - 1px),white var(--inner-radius),white calc(100% - 1px),transparent 100%);transform-origin:center}.container--hsl .color-wheel{--l-color: calc(var(--lightness) * 1%);--center-l-color: calc(var(--lightness) * 1%)}.container--mobile-ui .color-wheel{transform:rotate(calc(var(--hue) * 1deg))}.slider-container{pointer-events:none;position:absolute;aspect-ratio:1 / 1;height:100%;top:50%;left:50%;min-height:calc(2 * var(--radius));min-width:calc(2 * var(--radius));transform:translate(-50%,-50%) rotate(calc(var(--hue) * -1deg - 90deg))}.slider-container-half{position:absolute;inset:0 0 0 50%}.slider{pointer-events:none;touch-action:none;position:absolute;top:50%;width:calc(2 * var(--thumb-radius));height:calc(2 * var(--thumb-radius));background:hsl(var(--hue),calc(var(--saturation) * 1%),calc((100% - var(--saturation) * .5%) * var(--value) / 100));border:4px solid #888;border-radius:50%;cursor:pointer;transform:translate(-50%,-50%);left:calc(var(--inner-radius) + (1% * var(--saturation)) - (var(--saturation) * var(--inner-radius) / 100))}.container--hsl .slider{background:hsl(var(--hue),calc(var(--saturation) * 1%),calc(var(--lightness, 50) * 1%))}.inner-radius-calc{visibility:position;z-index:-1;height:1px;pointer-events:none;touch-action:none;width:var(--inner-radius)}.slider-track{display:none;pointer-events:none}.slider:before{display:block;position:absolute;inset:-3px;background:transparent;border-radius:50%;border:2px solid #ffffff;content:\" \";pointer-events:none;touch-action:none}.container--mobile-ui .slider-container{transform:translate(-50%,-50%) rotate(-90deg)}.container--mobile-ui .slider-track{position:absolute;inset:0;display:inline;z-index:-1;overflow:hidden;mask-image:radial-gradient(circle closest-side at center,transparent calc(var(--inner-radius) - 1px),white var(--inner-radius),white calc(100% - 1px),transparent 100%);-webkit-mask-image:radial-gradient(circle closest-side at center,transparent calc(var(--inner-radius) - 1px),white var(--inner-radius),white calc(100% - 1px),transparent 100%)}.container--mobile-ui .slider-track:after{content:\" \";position:absolute;inset:calc(50% - 2px) -10px calc(50% - 2px) 50%;border:1px solid black}.container--mobile-ui .slider{pointer-events:auto}\\n';\nexport {\n  stdin_default as default\n};\n", "import { calculateDistanceBetween2Points, CircleInfo } from './geometry.js'\nimport { shadowDomCustomCssVariableObserver, cleanPropertyValue } from './observe-css-var.feature.js'\nimport html from './color-wheel.element.html.generated.js'\nimport css from './color-wheel.element.css.generated.js'\n\nlet loadTemplate = () => {\n  const templateElement = document.createElement('template')\n  templateElement.innerHTML = html\n  loadTemplate = () => templateElement\n  return templateElement\n}\n\nlet loadStyles = () => {\n  const sheet = new CSSStyleSheet()\n  sheet.replaceSync(css)\n  loadStyles = () => sheet\n  return sheet\n}\n\nconst uiModeObserver = shadowDomCustomCssVariableObserver('--ui-mode', ({ target }) => target instanceof ColorWheelElement && updateContainerUIModeClass(target))\nconst defaultUiModeObserver = shadowDomCustomCssVariableObserver('--default-ui-mode', ({ target }) => target instanceof ColorWheelElement && updateContainerUIModeClass(target))\n/** @type {(shadowRoot: ParentNode | null, selector: string) => HTMLElement } */\nconst queryRequired = (shadowRoot, selector) => {\n  if (!shadowRoot) { throw new Error(`Color-wheel: Error from shadowDOM: parent node is ${shadowRoot}`) }\n  const result = shadowRoot.querySelector(selector)\n  if (!result || !(result instanceof HTMLElement)) { throw new Error(`Color-wheel: Error from shadowDOM: html element \"${selector}\" not found`) }\n  return result\n}\n\nclass ColorWheelElement extends HTMLElement {\n  constructor () {\n    super()\n    const shadowRoot = this.attachShadow({ mode: 'open' })\n    shadowRoot.adoptedStyleSheets = [loadStyles()]\n    const template = loadTemplate()\n\n    shadowRoot.append(document.importNode(template.content, true))\n    const fromShadowRoot = queryRequired.bind(null, shadowRoot)\n    const wheelContainer = fromShadowRoot('.color-wheel-container')\n    const innerRadiusCalc = fromShadowRoot('.inner-radius-calc')\n    const wheel = fromShadowRoot('.color-wheel')\n    const slider = fromShadowRoot('.slider')\n    if (!wheelContainer || !innerRadiusCalc) {\n      throw new Error('Error loading Color-wheel: \".color-wheel-container\", \".inner-radius-calc\", \".color-wheel\" or  not found')\n    }\n    const wheelStyle = window.getComputedStyle(wheel)\n\n    uiModeObserver.observe(this)\n    defaultUiModeObserver.observe(this)\n    updateContainerUIModeClass(this)\n    reflectLightness(this)\n    reflectValue(this)\n\n    const getWheelCenterPoint = () => {\n      const pointerBox = wheelContainer.getBoundingClientRect()\n      const centerPoint = wheelStyle.transformOrigin\n      const centers = centerPoint.split(' ')\n      const centerY = pointerBox.top + parseInt(centers[1])\n      const centerX = pointerBox.left + parseInt(centers[0])\n      return { x: centerX, y: centerY }\n    }\n\n    const getRadiusValues = () => {\n      const pointerBox = wheelContainer.getBoundingClientRect()\n      const innerRadiusCSSValue = wheelStyle.getPropertyValue('--inner-radius').trim()\n      if (/[0-9]+%/g.test(innerRadiusCSSValue)) {\n        const innerRadiusPerc = parseFloat(innerRadiusCSSValue)\n        return CircleInfo.fromRectWithPercentInnerRadius(pointerBox, innerRadiusPerc)\n      }\n      const innerRadius = innerRadiusCalc.getBoundingClientRect().width\n      return CircleInfo.fromRectWithInnerRadius(pointerBox, innerRadius)\n    }\n\n    /**\n     * Inits drag event, calling `callback` until it finishes, preventing default event and propagation during the operation\n     * @param {(event: PointerEvent) => void} callback - callback to execute\n     */\n    const initDrag = (callback) => {\n      const window = this.ownerDocument.defaultView\n      if (!window) { return }\n      /** @param {PointerEvent} e - event to pass to `callback` */\n      const defaultPrevented = e => { e.preventDefault(); e.stopPropagation(); callback(e) }\n      window.addEventListener('pointermove', defaultPrevented, { capture: true })\n      window.addEventListener('pointerup', () => {\n        window.removeEventListener('pointermove', defaultPrevented, { capture: true })\n      }, { once: true, capture: true })\n    }\n\n    /**\n     * Init slider drag and drop\n     */\n    const initSliderDrag = () => {\n      const centerPoint = getWheelCenterPoint()\n      const disk = getRadiusValues()\n\n      /** @param {PointerEvent} e - pointermove event */\n      const slideSaturation = (e) => {\n        const saturationPoint = {\n          x: centerPoint.x,\n          y: Math.min(centerPoint.y, e.clientY),\n        }\n        const newSaturation = calculateSaturation(disk, saturationPoint)\n        this.saturation = newSaturation\n        const event = new CustomEvent('input', { bubbles: true })\n        this.dispatchEvent(event)\n      }\n      initDrag(slideSaturation)\n    }\n\n    /** @param {PointerEvent} pointerEvent - pointerdown event */\n    const initWheelDrag = (pointerEvent) => {\n      const centerPoint = getWheelCenterPoint()\n      const disk = getRadiusValues()\n\n      const { hue } = this\n\n      /**\n       * @param {PointerEvent} e - pointermove event\n       * @returns {number} theta value in degrees\n       */\n      const getAngle = (e) => {\n        const deltaX = e.clientX - centerPoint.x\n        const deltaY = centerPoint.y - e.clientY\n        const thetaRadians = Math.atan2(deltaY, deltaX)\n        return thetaRadians * -180 / Math.PI\n      }\n\n      const initDeg = getAngle(pointerEvent)\n      const uiMode = this.uiMode\n\n      if ((uiMode || '').trim() === 'mobile') {\n        /** @param {PointerEvent} e - pointermove event */\n        const rotateWheel = (e) => {\n          const deg = getAngle(e)\n          const newHue = Math.round(deg - initDeg + hue + 360) % 360\n          this.hue = newHue\n          const event = new CustomEvent('input', { bubbles: true })\n          this.dispatchEvent(event)\n        }\n        initDrag(rotateWheel)\n      } else {\n        /** @param {PointerEvent} e - pointermove event */\n        const rotateSlider = (e) => {\n          const deg = getAngle(e)\n          const newHue = Math.round(-deg + 360 * 2 - 90) % 360\n          this.hue = newHue\n          const clientPoint = { x: e.clientX, y: e.clientY }\n          const newSaturation = calculateSaturation(disk, clientPoint)\n          this.saturation = newSaturation\n          const event = new CustomEvent('input', { bubbles: true })\n          this.dispatchEvent(event)\n        }\n        rotateSlider(pointerEvent)\n        initDrag(rotateSlider)\n      }\n    }\n\n    wheel.addEventListener('pointerdown', (event) => {\n      event.preventDefault()\n      event.stopPropagation()\n      initWheelDrag(/** @type {PointerEvent} */ (event))\n    })\n\n    slider.addEventListener('pointerdown', (event) => {\n      event.preventDefault()\n      event.stopPropagation()\n      initSliderDrag()\n    })\n    reflectHue(this)\n    reflectSaturation(this)\n  }\n\n  static get observedAttributes () {\n    return ['saturation', 'hue', 'lightness', 'value']\n  }\n\n  /**\n   * @param {string} name - changed attribute name\n   * @param {string} oldValue - old attribute value\n   * @param {string} newValue - new attribute value\n   */\n  attributeChangedCallback (name, oldValue, newValue) {\n    if (oldValue === newValue) return\n    switch (name) {\n      case 'saturation':\n        reflectSaturation(this)\n        return\n      case 'hue':\n        reflectHue(this)\n        return\n      case 'lightness':\n        reflectLightness(this)\n        return\n      case 'value':\n        reflectValue(this)\n    }\n  }\n\n  get uiMode () {\n    const computedStyle = getComputedStyle(getContainer(this))\n    const uiMode = cleanPropertyValue(computedStyle.getPropertyValue('--ui-mode'))\n    switch (uiMode) {\n      case 'desktop':\n      case 'mobile':\n        return uiMode\n    }\n    return cleanPropertyValue(computedStyle.getPropertyValue('--default-ui-mode'))\n  }\n\n  get hue () {\n    return getNumericValueFromAttribute(this, 'hue', 0)\n  }\n\n  set hue (hue) {\n    this.setAttribute('hue', String(hue))\n  }\n\n  get saturation () {\n    return getNumericValueFromAttribute(this, 'saturation', 0)\n  }\n\n  set saturation (saturation) {\n    this.setAttribute('saturation', String(saturation))\n  }\n\n  get value () {\n    return getNumericValueFromAttribute(this, 'value', 100)\n  }\n\n  set value (value) {\n    this.setAttribute('value', String(value))\n  }\n\n  get lightness () {\n    return getNumericValueFromAttribute(this, 'lightness', 50)\n  }\n\n  set lightness (lightness) {\n    this.setAttribute('lightness', String(lightness))\n  }\n}\n\n/**\n * @param {import('./geometry.js').Disk} disk - color wheel geometry\n * @param {import('./geometry.js').Point} point - target position\n * @returns {number} saturation value, will not go below 0 or above 100\n */\nfunction calculateSaturation (disk, point) {\n  const { center, radius, innerRadiusPerc } = disk\n  const r = calculateDistanceBetween2Points(center, point)\n  const rperc = Math.min(100, Math.max(0, r * 100 / radius))\n  const saturation = (rperc - innerRadiusPerc) * 100 / (100 - innerRadiusPerc)\n  return Math.round(Math.min(100, Math.max(0, saturation)))\n}\n\n/**\n * @param {ColorWheelElement} element - target Element\n * @param {string} attribute - attribute\n * @param {number} defaultValue - default value\n * @returns {number} - numeric value, or default if not defined or invalid\n */\nfunction getNumericValueFromAttribute (element, attribute, defaultValue) {\n  const value = element.getAttribute(attribute)\n  if (!value) { return defaultValue }\n  const asInt = parseInt(value)\n  return isNaN(asInt) ? defaultValue : asInt\n}\n\n/**\n * @param {ColorWheelElement} element - target element\n * @returns {HTMLElement} container element\n */\nconst getContainer = element => queryRequired(element.shadowRoot, '.container')\n\n/**\n * @param {ColorWheelElement} element - target element\n * @param {string} property - css\n * @param {string | number} value - new valuw\n */\nconst setContainerProperty = (element, property, value) => { getContainer(element).style.setProperty(property, String(value)) }\n\n/**\n *\n * @param {ColorWheelElement} element - target element\n */\nfunction updateContainerUIModeClass (element) {\n  const container = getContainer(element)\n  const { uiMode } = element\n  container.classList.toggle('container--desktop-ui', uiMode === 'desktop')\n  container.classList.toggle('container--mobile-ui', uiMode === 'mobile')\n}\n\n/**\n * updates ColorWheelElement color view based on the data\n * By default it used the HSV color scheme, it only uses HSL when only HSL attributes are defined\n * @param {ColorWheelElement} element - target element\n */\nfunction reflectHsl (element) {\n  const container = getContainer(element)\n  if (!container) { return }\n  const setHSLMode = element.hasAttribute('lightness') && !element.hasAttribute('value')\n  container.classList.toggle('container--hsl', setHSLMode)\n}\n\n/** @param {ColorWheelElement} element - target element */\nconst reflectHue = element => { setContainerProperty(element, '--hue', element.hue) }\n/** @param {ColorWheelElement} element - target element */\nconst reflectSaturation = element => { setContainerProperty(element, '--saturation', element.saturation) }\n/** @param {ColorWheelElement} element - target element */\nconst reflectLightness = element => { reflectHsl(element); setContainerProperty(element, '--lightness', element.lightness) }\n/** @param {ColorWheelElement} element - target element */\nconst reflectValue = element => { reflectHsl(element); setContainerProperty(element, '--value', element.value) }\n\nconst url = new URL(import.meta.url)\nconst elementName = url.searchParams.get('named')\nif (elementName) {\n  if (customElements.get(elementName) != null) {\n    console.error(`A custom element with name \"${elementName}\" already exists`)\n  } else {\n    customElements.define(elementName, ColorWheelElement)\n  }\n}\n"],
  "mappings": "AAKO,IAAMA,EAAkC,CAAC,CAAE,EAAGC,EAAI,EAAGC,CAAG,EAAG,CAAE,EAAGC,EAAI,EAAGC,CAAG,IAAM,KAAK,MAAMD,EAAKF,IAAO,GAAKG,EAAKF,IAAO,CAAC,EAEnHG,EAAa,CAMxB,+BAAgCC,EAAMC,EAAiB,CACrD,GAAM,CAAE,EAAAC,EAAG,EAAAC,EAAG,MAAAC,EAAO,OAAAC,CAAO,EAAIL,EAC1BM,EAAS,KAAK,IAAIF,EAAOC,CAAM,EAAI,EACnCE,EAAeN,EAAkB,IAAQK,EACzCE,EAAS,CAAE,EAAGN,EAAIE,EAAQ,EAAG,EAAGD,EAAIE,EAAS,CAAE,EACrD,MAAO,CAAE,gBAAAJ,EAAiB,OAAAK,EAAQ,YAAAC,EAAa,OAAAC,CAAO,CACxD,EAMA,wBAAyBR,EAAMO,EAAa,CAC1C,GAAM,CAAE,EAAAL,EAAG,EAAAC,EAAG,MAAAC,EAAO,OAAAC,CAAO,EAAIL,EAC1BM,EAAS,KAAK,IAAIF,EAAOC,CAAM,EAAI,EACnCJ,EAAkBM,EAAc,IAAMD,EACtCE,EAAS,CAAE,EAAGN,EAAIE,EAAQ,EAAG,EAAGD,EAAIE,EAAS,CAAE,EACrD,MAAO,CAAE,gBAAAJ,EAAiB,OAAAK,EAAQ,YAAAC,EAAa,OAAAC,CAAO,CACxD,CACF,EC5BA,IAAMC,EAAqB,IAAI,QAEzBC,EAAiB,IAAI,eAAeC,GAAW,CACnD,IAAMC,EAAU,IAAI,IAAID,EAAQ,IAAIE,GAASA,EAAM,MAAM,CAAC,EAC1D,QAAWC,KAAUF,EAAS,CAC5B,IAAMG,EAAWD,EAAO,YAAY,EACpC,GAAI,EAAEC,aAAoB,YAAe,SACzC,IAAMC,EAAOD,EAAS,KACtB,GAAI,EAAEC,aAAgB,aAAgB,SACtC,IAAMC,EAAUR,EAAmB,IAAIO,CAAI,EAC3CC,GAAWA,EAAQ,QAAQC,GAAU,CACnC,IAAMC,EAAgB,iBAAiBH,CAAI,EACrCI,EAAWC,EAAmBF,EAAc,iBAAiBD,EAAO,kBAAkB,CAAC,EAC7F,GAAIA,EAAO,uBAAyBE,EAAU,CAC5C,IAAME,EAAkB,CACtB,OAAQN,EACR,cAAeE,EAAO,qBACtB,MAAOE,CACT,EACAF,EAAO,qBAAuBE,EAC9BF,EAAO,QAAQI,CAAe,CAChC,CACF,CAAC,CACH,CACF,CAAC,EAMKC,EAAqBC,GAAS,uBAAuBA,CAAI,GAMzDC,EAA2BD,GAAS,GAAGD,EAAkBC,CAAI,CAAC,WAM9DE,EAAgB,CAAC,EAMvB,SAASC,GAAqBH,EAAM,CAClC,GAAI,CAACE,EAAcF,CAAI,EAAG,CACxB,IAAMI,EAAW,SAAS,cAAc,UAAU,EAC5CC,EAAYN,EAAkBC,CAAI,EAClCM,EAAkBL,EAAwBD,CAAI,EACpDI,EAAS,UAAY,iBAAiBC,CAAS,MAAMC,CAAe,8DAA8DA,CAAe,yBAAyBN,CAAI,0BAA0BK,CAAS,IAAIC,CAAe,YACpOJ,EAAcF,CAAI,EAAII,CACxB,CAEA,OAAOF,EAAcF,CAAI,CAC3B,CAQO,SAASO,EAAoCC,EAAoBC,EAAU,CAChF,IAAML,EAAWD,GAAoBK,CAAkB,EACjDH,EAAYN,EAAkBS,CAAkB,EAChDF,EAAkBL,EAAwBO,CAAkB,EAClE,MAAO,CACL,QAAUE,GAAY,CACpB,IAAMC,EAAkB1B,EAAmB,IAAIyB,CAAO,GAAK,CAAC,EAG5D,GAFgCC,EAAgB,OAAOjB,GAAUA,EAAO,qBAAuBc,CAAkB,EAErF,QAAU,EAAG,CACvCE,EAAQ,YAAY,OAAO,SAAS,WAAWN,EAAS,QAAS,EAAI,CAAC,EACtE,IAAMQ,EAAmBF,EAAQ,YAAY,cAAc,IAAIJ,CAAe,EAAE,EAChFM,GAAoB1B,EAAe,QAAQ0B,CAAgB,CAC7D,CAEA3B,EAAmB,IAAIyB,EAAS,CAAC,GAAGC,EAAiB,CACnD,qBAAsBd,EAAmB,iBAAiBa,CAAO,EAAE,iBAAiBF,CAAkB,CAAC,EACvG,QAASC,EACT,mBAAAD,CACF,CAAC,CAAC,CACJ,EAEA,UAAYE,GAAY,CAEtB,IAAMG,GADkB5B,EAAmB,IAAIyB,CAAO,GAAK,CAAC,GACjB,OAAOhB,GAAUA,EAAO,UAAYe,GAAYf,EAAO,qBAAuBc,CAAkB,EAE3I,GADmCK,EAAmB,OAAOnB,GAAUA,EAAO,qBAAuBc,CAAkB,EACxF,QAAU,EAAG,CAC1C,IAAMI,EAAmBF,EAAQ,YAAY,cAAc,IAAIJ,CAAe,EAAE,EAChFM,GAAoB1B,EAAe,UAAU0B,CAAgB,EAC7DF,EAAQ,YAAY,iBAAiB,IAAIL,CAAS,EAAE,EAAE,QAAQS,GAAMA,EAAG,OAAO,CAAC,CACjF,CACA7B,EAAmB,IAAIyB,EAASG,CAAkB,CACpD,CACF,CACF,CAEA,IAAME,GAAoB,0BAQnB,SAASlB,EAAoBmB,EAAW,CAC7C,OAAI,OAAOA,GAAc,SAChB,GAEOA,EAAU,KAAK,EAChB,QAAQD,GAAmB,IAAI,CAChD,CCvHA,IAAIE,EAAgB,gRCApB,IAAIC,EAAgB;ECIpB,IAAIC,EAAe,IAAM,CACvB,IAAMC,EAAkB,SAAS,cAAc,UAAU,EACzD,OAAAA,EAAgB,UAAYC,EAC5BF,EAAe,IAAMC,EACdA,CACT,EAEIE,EAAa,IAAM,CACrB,IAAMC,EAAQ,IAAI,cAClB,OAAAA,EAAM,YAAYF,CAAG,EACrBC,EAAa,IAAMC,EACZA,CACT,EAEMC,GAAiBC,EAAmC,YAAa,CAAC,CAAE,OAAAC,CAAO,IAAMA,aAAkBC,GAAqBC,EAA2BF,CAAM,CAAC,EAC1JG,GAAwBJ,EAAmC,oBAAqB,CAAC,CAAE,OAAAC,CAAO,IAAMA,aAAkBC,GAAqBC,EAA2BF,CAAM,CAAC,EAEzKI,EAAgB,CAACC,EAAYC,IAAa,CAC9C,GAAI,CAACD,EAAc,MAAM,IAAI,MAAM,qDAAqDA,CAAU,EAAE,EACpG,IAAME,EAASF,EAAW,cAAcC,CAAQ,EAChD,GAAI,CAACC,GAAU,EAAEA,aAAkB,aAAgB,MAAM,IAAI,MAAM,oDAAoDD,CAAQ,aAAa,EAC5I,OAAOC,CACT,EAEMN,EAAN,cAAgC,WAAY,CAC1C,aAAe,CACb,MAAM,EACN,IAAMI,EAAa,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EACrDA,EAAW,mBAAqB,CAACT,EAAW,CAAC,EAC7C,IAAMY,EAAWf,EAAa,EAE9BY,EAAW,OAAO,SAAS,WAAWG,EAAS,QAAS,EAAI,CAAC,EAC7D,IAAMC,EAAiBL,EAAc,KAAK,KAAMC,CAAU,EACpDK,EAAiBD,EAAe,wBAAwB,EACxDE,EAAkBF,EAAe,oBAAoB,EACrDG,EAAQH,EAAe,cAAc,EACrCI,EAASJ,EAAe,SAAS,EACvC,GAAI,CAACC,GAAkB,CAACC,EACtB,MAAM,IAAI,MAAM,yGAAyG,EAE3H,IAAMG,EAAa,OAAO,iBAAiBF,CAAK,EAEhDd,GAAe,QAAQ,IAAI,EAC3BK,GAAsB,QAAQ,IAAI,EAClCD,EAA2B,IAAI,EAC/Ba,EAAiB,IAAI,EACrBC,EAAa,IAAI,EAEjB,IAAMC,EAAsB,IAAM,CAChC,IAAMC,EAAaR,EAAe,sBAAsB,EAElDS,EADcL,EAAW,gBACH,MAAM,GAAG,EAC/BM,EAAUF,EAAW,IAAM,SAASC,EAAQ,CAAC,CAAC,EAEpD,MAAO,CAAE,EADOD,EAAW,KAAO,SAASC,EAAQ,CAAC,CAAC,EAChC,EAAGC,CAAQ,CAClC,EAEMC,EAAkB,IAAM,CAC5B,IAAMH,EAAaR,EAAe,sBAAsB,EAClDY,EAAsBR,EAAW,iBAAiB,gBAAgB,EAAE,KAAK,EAC/E,GAAI,WAAW,KAAKQ,CAAmB,EAAG,CACxC,IAAMC,EAAkB,WAAWD,CAAmB,EACtD,OAAOE,EAAW,+BAA+BN,EAAYK,CAAe,CAC9E,CACA,IAAME,EAAcd,EAAgB,sBAAsB,EAAE,MAC5D,OAAOa,EAAW,wBAAwBN,EAAYO,CAAW,CACnE,EAMMC,EAAYC,GAAa,CAC7B,IAAMC,EAAS,KAAK,cAAc,YAClC,GAAI,CAACA,EAAU,OAEf,IAAMC,EAAmBC,GAAK,CAAEA,EAAE,eAAe,EAAGA,EAAE,gBAAgB,EAAGH,EAASG,CAAC,CAAE,EACrFF,EAAO,iBAAiB,cAAeC,EAAkB,CAAE,QAAS,EAAK,CAAC,EAC1ED,EAAO,iBAAiB,YAAa,IAAM,CACzCA,EAAO,oBAAoB,cAAeC,EAAkB,CAAE,QAAS,EAAK,CAAC,CAC/E,EAAG,CAAE,KAAM,GAAM,QAAS,EAAK,CAAC,CAClC,EAKME,EAAiB,IAAM,CAC3B,IAAMC,EAAcf,EAAoB,EAClCgB,EAAOZ,EAAgB,EAa7BK,EAVyBI,GAAM,CAC7B,IAAMI,EAAkB,CACtB,EAAGF,EAAY,EACf,EAAG,KAAK,IAAIA,EAAY,EAAGF,EAAE,OAAO,CACtC,EACMK,EAAgBC,EAAoBH,EAAMC,CAAe,EAC/D,KAAK,WAAaC,EAClB,IAAME,EAAQ,IAAI,YAAY,QAAS,CAAE,QAAS,EAAK,CAAC,EACxD,KAAK,cAAcA,CAAK,CAC1B,CACwB,CAC1B,EAGMC,EAAiBC,GAAiB,CACtC,IAAMP,EAAcf,EAAoB,EAClCgB,EAAOZ,EAAgB,EAEvB,CAAE,IAAAmB,CAAI,EAAI,KAMVC,EAAYX,GAAM,CACtB,IAAMY,EAASZ,EAAE,QAAUE,EAAY,EACjCW,EAASX,EAAY,EAAIF,EAAE,QAEjC,OADqB,KAAK,MAAMa,EAAQD,CAAM,EACxB,KAAO,KAAK,EACpC,EAEME,EAAUH,EAASF,CAAY,EAGrC,IAFe,KAAK,QAEL,IAAI,KAAK,IAAM,SAS5Bb,EAPqBI,GAAM,CACzB,IAAMe,EAAMJ,EAASX,CAAC,EAChBgB,EAAS,KAAK,MAAMD,EAAMD,EAAUJ,EAAM,GAAG,EAAI,IACvD,KAAK,IAAMM,EACX,IAAMT,EAAQ,IAAI,YAAY,QAAS,CAAE,QAAS,EAAK,CAAC,EACxD,KAAK,cAAcA,CAAK,CAC1B,CACoB,MACf,CAEL,IAAMU,EAAgBjB,GAAM,CAC1B,IAAMe,EAAMJ,EAASX,CAAC,EAChBgB,EAAS,KAAK,MAAM,CAACD,EAAM,IAAM,EAAI,EAAE,EAAI,IACjD,KAAK,IAAMC,EACX,IAAME,EAAc,CAAE,EAAGlB,EAAE,QAAS,EAAGA,EAAE,OAAQ,EAC3CK,EAAgBC,EAAoBH,EAAMe,CAAW,EAC3D,KAAK,WAAab,EAClB,IAAME,EAAQ,IAAI,YAAY,QAAS,CAAE,QAAS,EAAK,CAAC,EACxD,KAAK,cAAcA,CAAK,CAC1B,EACAU,EAAaR,CAAY,EACzBb,EAASqB,CAAY,CACvB,CACF,EAEAnC,EAAM,iBAAiB,cAAgByB,GAAU,CAC/CA,EAAM,eAAe,EACrBA,EAAM,gBAAgB,EACtBC,EAA2CD,CAAM,CACnD,CAAC,EAEDxB,EAAO,iBAAiB,cAAgBwB,GAAU,CAChDA,EAAM,eAAe,EACrBA,EAAM,gBAAgB,EACtBN,EAAe,CACjB,CAAC,EACDkB,EAAW,IAAI,EACfC,EAAkB,IAAI,CACxB,CAEA,WAAW,oBAAsB,CAC/B,MAAO,CAAC,aAAc,MAAO,YAAa,OAAO,CACnD,CAOA,yBAA0BC,EAAMC,EAAUC,EAAU,CAClD,GAAID,IAAaC,EACjB,OAAQF,EAAM,CACZ,IAAK,aACHD,EAAkB,IAAI,EACtB,OACF,IAAK,MACHD,EAAW,IAAI,EACf,OACF,IAAK,YACHlC,EAAiB,IAAI,EACrB,OACF,IAAK,QACHC,EAAa,IAAI,CACrB,CACF,CAEA,IAAI,QAAU,CACZ,IAAMsC,EAAgB,iBAAiBC,EAAa,IAAI,CAAC,EACnDC,EAASC,EAAmBH,EAAc,iBAAiB,WAAW,CAAC,EAC7E,OAAQE,EAAQ,CACd,IAAK,UACL,IAAK,SACH,OAAOA,CACX,CACA,OAAOC,EAAmBH,EAAc,iBAAiB,mBAAmB,CAAC,CAC/E,CAEA,IAAI,KAAO,CACT,OAAOI,EAA6B,KAAM,MAAO,CAAC,CACpD,CAEA,IAAI,IAAKlB,EAAK,CACZ,KAAK,aAAa,MAAO,OAAOA,CAAG,CAAC,CACtC,CAEA,IAAI,YAAc,CAChB,OAAOkB,EAA6B,KAAM,aAAc,CAAC,CAC3D,CAEA,IAAI,WAAYC,EAAY,CAC1B,KAAK,aAAa,aAAc,OAAOA,CAAU,CAAC,CACpD,CAEA,IAAI,OAAS,CACX,OAAOD,EAA6B,KAAM,QAAS,GAAG,CACxD,CAEA,IAAI,MAAOE,EAAO,CAChB,KAAK,aAAa,QAAS,OAAOA,CAAK,CAAC,CAC1C,CAEA,IAAI,WAAa,CACf,OAAOF,EAA6B,KAAM,YAAa,EAAE,CAC3D,CAEA,IAAI,UAAWG,EAAW,CACxB,KAAK,aAAa,YAAa,OAAOA,CAAS,CAAC,CAClD,CACF,EAOA,SAASzB,EAAqBH,EAAM6B,EAAO,CACzC,GAAM,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,gBAAAzC,CAAgB,EAAIU,EACtCgC,EAAIC,EAAgCH,EAAQD,CAAK,EAEjDH,GADQ,KAAK,IAAI,IAAK,KAAK,IAAI,EAAGM,EAAI,IAAMD,CAAM,CAAC,EAC7BzC,GAAmB,KAAO,IAAMA,GAC5D,OAAO,KAAK,MAAM,KAAK,IAAI,IAAK,KAAK,IAAI,EAAGoC,CAAU,CAAC,CAAC,CAC1D,CAQA,SAASD,EAA8BS,EAASC,EAAWC,EAAc,CACvE,IAAMT,EAAQO,EAAQ,aAAaC,CAAS,EAC5C,GAAI,CAACR,EAAS,OAAOS,EACrB,IAAMC,EAAQ,SAASV,CAAK,EAC5B,OAAO,MAAMU,CAAK,EAAID,EAAeC,CACvC,CAMA,IAAMf,EAAeY,GAAW/D,EAAc+D,EAAQ,WAAY,YAAY,EAOxEI,EAAuB,CAACJ,EAASK,EAAUZ,IAAU,CAAEL,EAAaY,CAAO,EAAE,MAAM,YAAYK,EAAU,OAAOZ,CAAK,CAAC,CAAE,EAM9H,SAAS1D,EAA4BiE,EAAS,CAC5C,IAAMM,EAAYlB,EAAaY,CAAO,EAChC,CAAE,OAAAX,CAAO,EAAIW,EACnBM,EAAU,UAAU,OAAO,wBAAyBjB,IAAW,SAAS,EACxEiB,EAAU,UAAU,OAAO,uBAAwBjB,IAAW,QAAQ,CACxE,CAOA,SAASkB,EAAYP,EAAS,CAC5B,IAAMM,EAAYlB,EAAaY,CAAO,EACtC,GAAI,CAACM,EAAa,OAClB,IAAME,EAAaR,EAAQ,aAAa,WAAW,GAAK,CAACA,EAAQ,aAAa,OAAO,EACrFM,EAAU,UAAU,OAAO,iBAAkBE,CAAU,CACzD,CAGA,IAAM1B,EAAakB,GAAW,CAAEI,EAAqBJ,EAAS,QAASA,EAAQ,GAAG,CAAE,EAE9EjB,EAAoBiB,GAAW,CAAEI,EAAqBJ,EAAS,eAAgBA,EAAQ,UAAU,CAAE,EAEnGpD,EAAmBoD,GAAW,CAAEO,EAAWP,CAAO,EAAGI,EAAqBJ,EAAS,cAAeA,EAAQ,SAAS,CAAE,EAErHnD,EAAemD,GAAW,CAAEO,EAAWP,CAAO,EAAGI,EAAqBJ,EAAS,UAAWA,EAAQ,KAAK,CAAE,EAEzGS,GAAM,IAAI,IAAI,YAAY,GAAG,EAC7BC,EAAcD,GAAI,aAAa,IAAI,OAAO,EAC5CC,IACE,eAAe,IAAIA,CAAW,GAAK,KACrC,QAAQ,MAAM,+BAA+BA,CAAW,kBAAkB,EAE1E,eAAe,OAAOA,EAAa5E,CAAiB",
  "names": ["calculateDistanceBetween2Points", "x1", "y1", "x2", "y2", "CircleInfo", "rect", "innerRadiusPerc", "x", "y", "width", "height", "radius", "innerRadius", "center", "observerOptionsMap", "resizeObserver", "entries", "targets", "entry", "target", "rootNode", "host", "options", "option", "computedStyle", "newValue", "cleanPropertyValue", "callbackOptions", "observerClassName", "name", "observerTargetClassName", "templateCache", "cssPropertyTemplate", "template", "className", "targetClassName", "shadowDomCustomCssVariableObserver", "customPropertyName", "callback", "element", "observerOptions", "elementToObserve", "newObserverOptions", "el", "TRIM_QUOTES_REGEX", "propValue", "stdin_default", "stdin_default", "loadTemplate", "templateElement", "stdin_default", "loadStyles", "sheet", "uiModeObserver", "shadowDomCustomCssVariableObserver", "target", "ColorWheelElement", "updateContainerUIModeClass", "defaultUiModeObserver", "queryRequired", "shadowRoot", "selector", "result", "template", "fromShadowRoot", "wheelContainer", "innerRadiusCalc", "wheel", "slider", "wheelStyle", "reflectLightness", "reflectValue", "getWheelCenterPoint", "pointerBox", "centers", "centerY", "getRadiusValues", "innerRadiusCSSValue", "innerRadiusPerc", "CircleInfo", "innerRadius", "initDrag", "callback", "window", "defaultPrevented", "e", "initSliderDrag", "centerPoint", "disk", "saturationPoint", "newSaturation", "calculateSaturation", "event", "initWheelDrag", "pointerEvent", "hue", "getAngle", "deltaX", "deltaY", "initDeg", "deg", "newHue", "rotateSlider", "clientPoint", "reflectHue", "reflectSaturation", "name", "oldValue", "newValue", "computedStyle", "getContainer", "uiMode", "cleanPropertyValue", "getNumericValueFromAttribute", "saturation", "value", "lightness", "point", "center", "radius", "r", "calculateDistanceBetween2Points", "element", "attribute", "defaultValue", "asInt", "setContainerProperty", "property", "container", "reflectHsl", "setHSLMode", "url", "elementName"]
}
