{
  "version": 3,
  "sources": ["../../src/geometry.ts", "../../src/observe-css-var.feature.js", "../../src/color-wheel.element.js"],
  "sourcesContent": ["\ninterface Rect {\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\n/**\n * @param {{x: number, y: number}} p1\n * @param {{x: number, y: number}} p2\n */\nexport const calculateDistanceBetween2Points = ({x: x1, y: y1}, {x: x2, y: y2}) => Math.sqrt((x2 - x1)**2 + (y2 - y1)**2);\n\nexport const CircleInfo = {\n    fromRectWithPercentInnerRadius(rect: Rect, innerRadiusPerc: number){\n        const {x, y, width, height} = rect\n        const radius = Math.min(width, height) / 2\n        const innerRadius = (innerRadiusPerc * 0.01) * radius\n        const center = {x: x + width/2, y: y + height/2}\n        return { innerRadiusPerc, radius, innerRadius, center }\n    },\n    fromRectWithInnerRadius(rect:Rect, innerRadius: number){\n        const {x, y, width, height} = rect\n        const radius = Math.min(width, height) / 2\n        const innerRadiusPerc = innerRadius * 100 / radius\n        const center = {x: x + width/2, y: y + height/2}\n        return { innerRadiusPerc, radius, innerRadius, center }\n    }\n}\n", "\n/** @type {WeakMap<HTMLElement, CachedObserverOption[]>} */\nconst observerOptionsMap = new WeakMap();\n\nconst trimQuotesRegex = /^[\"'](.+(?=[\"']$))[\"']$/\nexport const cleanPropertyValue = propValue => {\n    if(typeof propValue !== \"string\"){\n        return \"\"\n    }\n    const trimmed = propValue.trim();\n    return trimmed.replace(trimQuotesRegex, '$1');\n\n}\n\nconst resizeObserver = new ResizeObserver(entries => {\n    const targets = new Set(entries.map(entry => entry.target))\n    for (const target of targets) {\n        const host = target.getRootNode().host\n        const options = observerOptionsMap.get(host);\n        options.forEach(option => {\n            const computedStyle = getComputedStyle(host)\n            const newValue = cleanPropertyValue(computedStyle.getPropertyValue(option.customPropertyName))\n            if(option.currentPropertyValue !== newValue){\n                const callbackOptions = {\n                    target: host,\n                    previousValue: option.currentPropertyValue,\n                    value: newValue\n                }\n                option.currentPropertyValue = newValue\n                option.executeCallback(callbackOptions)\n            }\n        })\n    }\n});\n\n\nconst templateCache = {}\n\nconst createTemplate = (name) => {\n    if(!templateCache[name]){\n        const template = document.createElement(\"template\")\n        template.innerHTML = `<style class=\"css-watch-observer__${name}\">\n        .css-watch-observer__${name}--target {\n            font-size: 1rem;\n            display: inline-block;\n            visibility: hidden;\n            position: absolute;\n            z-index: -10000;\n            pointer-events: none\n        }\n    \n        .css-watch-observer__${name}--target::before {\n            content: var(${name})\n        }            \n        </style>\n        <span class=\"css-watch-observer__${name} css-watch-observer__${name}--target\"></span>\n        `\n        templateCache[name] = template \n    }\n\n    return templateCache[name]\n}\n\n/**\n * \n * @param {string} name \n * @param {function} callback \n * @returns {Observer}\n */\nexport function shadowDomCustomCssVariableObserver(name, callback){\n    const template = createTemplate(name)\n    return {\n        observe: (element) => {\n            const observerOptions = observerOptionsMap.get(element) || []\n            const observerOptionsWithName = observerOptions.filter(option => option.customPropertyName === name)\n\n            if(observerOptionsWithName.length <= 0){\n                element.shadowRoot.append(document.importNode(template.content, true))\n                const elementToObserve = element.shadowRoot.querySelector(`.css-watch-observer__${name}--target`)\n                resizeObserver.observe(elementToObserve)    \n            }\n\n            observerOptionsMap.set(element, [...observerOptions, {\n                currentPropertyValue: cleanPropertyValue(getComputedStyle(element).getPropertyValue(name)),\n                executeCallback: callback,\n                customPropertyName: name\n            }])\n        },\n\n        unobserve: (element) => {\n            const observerOptions = observerOptionsMap.get(element) || []\n            const newObserverOptions = observerOptions.filter(option => option.executeCallback !== callback || option.customPropertyName !== name )\n            const newObserverOptionsWithName = newObserverOptions.filter(option => option.customPropertyName === name)\n            if(newObserverOptionsWithName.length <= 0){\n                const elementToObserve = element.shadowRoot.querySelector(`.css-watch-observer__${name}--target`)\n                resizeObserver.unobserve(elementToObserve)\n                element.shadowRoot.querySelectorAll(`.css-watch-observer__${name}`).forEach(el => el.remove())\n            }\n            observerOptionsMap.set(element, newObserverOptions)\n        }\n    }\n\n\n}\n\n/** \n * @typedef {object} ObserverOption \n * @property {string[]} acceptValues\n * @property {function} executeCallback\n * @property {string} currentPropertyValue\n * @property {string} customPropertyName\n * \n * @typedef {object} Observer\n * @property {(element: HTMLElement) => void} observe\n * @property {(element: HTMLElement) => void} unobserve\n * */\n", "import { calculateDistanceBetween2Points, CircleInfo } from './geometry.js'\nimport {shadowDomCustomCssVariableObserver, cleanPropertyValue} from './observe-css-var.feature.js'\nimport html from './color-wheel.element.html'\nimport css from './color-wheel.element.css'\n\nlet loadTemplate = () => {\n  const templateElement = document.createElement(\"template\")\n  templateElement.innerHTML = html\n  loadTemplate = () => templateElement\n  return templateElement\n}\n\nlet loadStyles = () => {\n  const sheet = new CSSStyleSheet();\n  sheet.replaceSync(css);\n  loadStyles = () => sheet\n  return sheet\n}\n  \n\n  /**\n   * \n   * @param {ColorWheelElement} element \n   */\n  function updateContainerClass(element){\n    const container = element.shadowRoot.querySelector('.container')\n    const {uiMode} = element\n    container.classList.toggle('container--desktop-ui', uiMode === 'desktop')\n    container.classList.toggle('container--mobile-ui', uiMode === 'mobile')\n  }\n\n\n  const uiModeObserver = shadowDomCustomCssVariableObserver('--ui-mode', ({target}) => updateContainerClass(target))\n  const defaultUiModeObserver = shadowDomCustomCssVariableObserver('--default-ui-mode', ({target}) => updateContainerClass(target))\n  \n  class ColorWheelElement extends HTMLElement {\n    constructor(){\n      super()\n      const shadowRoot = this.attachShadow({ mode: 'open' })\n      shadowRoot.adoptedStyleSheets = [loadStyles()]\n      const template = loadTemplate()\n\n      shadowRoot.append(document.importNode(template.content, true))\n      const wheelContainer = shadowRoot.querySelector('.color-wheel-container')\n      const innerRadiusCalc = shadowRoot.querySelector('.inner-radius-calc')\n      const wheel = shadowRoot.querySelector('.color-wheel')\n      const slider = shadowRoot.querySelector('.slider')\n      const wheelStyle = window.getComputedStyle(wheel)\n            \n      uiModeObserver.observe(this)\n      defaultUiModeObserver.observe(this)\n      updateContainerClass(this)\n      reflectLightness(this)\n      reflectValue(this)\n\n      const getWheelCenterPoint = () => {\n          const pointerBox = wheelContainer.getBoundingClientRect();\n          const centerPoint = wheelStyle.transformOrigin;\n          const centers = centerPoint.split(\" \");\n          const centerY = pointerBox.top + parseInt(centers[1]);\n          const centerX = pointerBox.left + parseInt(centers[0]);\n          return { x: centerX, y: centerY }\n      }\n\n      const getRadiusValues = () => {\n        const pointerBox = wheelContainer.getBoundingClientRect();\n          const innerRadiusCSSValue = wheelStyle.getPropertyValue(\"--inner-radius\").trim()\n          if(/[0-9]+%/g.test(innerRadiusCSSValue)){\n            const innerRadiusPerc = parseInt(innerRadiusCSSValue)\n            return CircleInfo.fromRectWithPercentInnerRadius(pointerBox, innerRadiusPerc)\n          }\n          const innerRadius = innerRadiusCalc.getBoundingClientRect().width\n          return CircleInfo.fromRectWithInnerRadius(pointerBox, innerRadius)\n      }\n\n      const initDrag = (callback) => {\n          const defaultPrevented = e => { e.preventDefault(); e.stopPropagation(); callback(e) } \n          globalThis.addEventListener(\"pointermove\", defaultPrevented, {capture: true})\n          globalThis.addEventListener(\"pointerup\", () => {\n            globalThis.removeEventListener(\"pointermove\", defaultPrevented, {capture: true})\n          }, { once: true, capture: true })\n      }\n\n      const fromCenterPointAndRadius = ({ centerPoint, innerRadiusPerc, radius }) => ({\n          calculateSaturationFromMouseEvent(event) {\n              const r = calculateDistanceBetween2Points(centerPoint,  { x: event.clientX, y: event.clientY })\n              const rperc = Math.min(100, Math.max(0, r * 100 / radius))\n              return Math.round(Math.min(100, Math.max(0, (rperc - innerRadiusPerc) * 100 / (100 - innerRadiusPerc))))\n          }\n      })\n\n      const initSliderDrag = () => {\n          const centerPoint = getWheelCenterPoint()\n          const calculations = fromCenterPointAndRadius({\n              ...getRadiusValues(),\n              centerPoint\n          })\n\n          const slideSaturation = (e) => {\n              this.saturation = calculations.calculateSaturationFromMouseEvent({\n                clientX: centerPoint.x,\n                clientY: Math.min(centerPoint.y, e.clientY)\n              })\n              const event = new CustomEvent(\"input\", { bubbles: true })\n              this.dispatchEvent(event)\n          }\n          initDrag(slideSaturation)\n      }\n\n      const initWheelDrag = (clientCoordinates) => {\n          const centerPoint = getWheelCenterPoint()\n          const { hue } = this\n          const calculations = fromCenterPointAndRadius({\n              ...getRadiusValues(),\n              centerPoint\n          })\n\n          const getAngle = (e) => {\n              const delta_x =  e.clientX - centerPoint.x\n              const delta_y = centerPoint.y - e.clientY\n              const theta_radians = Math.atan2(delta_y, delta_x)\n              return theta_radians * -180/Math.PI \n          }\n\n          const initDeg = getAngle(clientCoordinates)\n          const uiMode = this.uiMode\n\n          if((uiMode || \"\").trim() === \"mobile\") {\n              const rotateWheel = (e) => {\n                  const deg = getAngle(e) \n                  const newHue = Math.round(deg - initDeg + hue + 360) % 360\n                  this.hue = newHue\n                  const event = new CustomEvent(\"input\", { bubbles: true })\n                  this.dispatchEvent(event)    \n              }\n              initDrag(rotateWheel)\n              \n          } else {\n              const rotateSlider = (e) => {\n                  const deg = getAngle(e) \n                  const newHue = Math.round(-deg + 360 * 2 - 90) % 360\n                  this.hue = newHue\n                  this.saturation = calculations.calculateSaturationFromMouseEvent(e)\n                  const event = new CustomEvent(\"input\", { bubbles: true })\n                  this.dispatchEvent(event)              \n              }\n\n              initDrag(rotateSlider)\n          }\n      }\n\n      wheel.addEventListener(\"pointerdown\", (event)  => {\n          event.preventDefault()\n          event.stopPropagation()\n          initWheelDrag(event)\n      })\n\n      slider.addEventListener(\"pointerdown\", (event) => {\n          event.preventDefault()\n          event.stopPropagation()\n          initSliderDrag()\n      })\n\n      reflectSaturation(reflectHue(this))\n    }\n\n    static get observedAttributes(){\n        return [\"saturation\", \"hue\", \"lightness\", \"value\"]\n    }\n\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if(oldValue === newValue) return \n        switch(name){\n          case \"saturation\": return reflectSaturation(this)\n          case \"hue\": return reflectHue(this)\n          case \"lightness\": return reflectLightness(this)\n          case \"value\": return reflectValue(this)\n        }\n      }\n\n  get uiMode(){\n    const computedStyle = getComputedStyle(this.shadowRoot.querySelector('.container'))\n    const uiMode = cleanPropertyValue(computedStyle.getPropertyValue(\"--ui-mode\"));\n    switch(uiMode){\n      case 'desktop':\n      case 'mobile':\n        return uiMode\n    }\n    return cleanPropertyValue(computedStyle.getPropertyValue(\"--default-ui-mode\"))\n\n  }\n\n  get hue(){\n    const asInt = parseInt(this.getAttribute(\"hue\"))\n    return isNaN(asInt) ? 0 : asInt\n  }\n\n  set hue(hue){\n    this.setAttribute(\"hue\", hue)\n  }\n\n  get saturation(){\n    const asInt = parseInt(this.getAttribute(\"saturation\"))\n    return isNaN(asInt) ? 0 : asInt\n  }\n\n  set saturation(saturation){\n    this.setAttribute(\"saturation\", saturation)\n  }\n\n  get value(){\n    const asInt = parseInt(this.getAttribute(\"value\"))\n    return isNaN(asInt) ? 100 : asInt\n  }\n\n  set value(value){\n      this.setAttribute(\"value\", value)\n  }\n\n  get lightness(){\n    const asInt = parseInt(this.getAttribute(\"lightness\"))\n    return isNaN(asInt) ? 50 : asInt\n  }\n\n  set lightness(lightness){\n    this.setAttribute(\"lightness\", lightness)\n  }\n}\n\nconst getContainer = element => element.shadowRoot.querySelector('.container')\nconst setContainerProperty = (element, property, value) => {\n  getContainer(element)?.style.setProperty(property, value)\n  return element\n}\n\nfunction reflectHsl(element){\n  const container = getContainer(element)\n  if(!container){ return }\n  const setHSLMode = element.hasAttribute(\"lightness\") && !element.hasAttribute(\"value\")\n  container.classList.toggle(\"container--hsl\", setHSLMode)\n}\n\nconst reflectHue = element => setContainerProperty(element, \"--hue\", element.hue)\nconst reflectSaturation = element => setContainerProperty(element, \"--saturation\", element.saturation)\nconst reflectLightness = element => (reflectHsl(element), setContainerProperty(element, \"--lightness\", element.lightness))\nconst reflectValue = element => (reflectHsl(element), setContainerProperty(element, \"--value\", element.value))\n\n  \nconst url = new URL(import.meta.url)\nconst elementName = url.searchParams.get('named')\nif(elementName){\n    if (customElements.get(elementName) != null){\n        console.error(`A custom element with name \"${elementName}\" already exists`)\n    } else {\n        customElements.define(elementName, ColorWheelElement)\n    }\n}\n  "],
  "mappings": "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",
  "names": ["color_wheel_element_default"]
}
