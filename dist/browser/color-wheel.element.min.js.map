{
  "version": 3,
  "sources": ["../../src/geometry.ts", "../../src/observe-css-var.feature.js", "../../src/color-wheel.element.js"],
  "sourcesContent": ["\ninterface Rect {\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\n/**\n * @param {{x: number, y: number}} p1\n * @param {{x: number, y: number}} p2\n */\nexport const calculateDistanceBetween2Points = ({x: x1, y: y1}, {x: x2, y: y2}) => Math.sqrt((x2 - x1)**2 + (y2 - y1)**2);\n\nexport const CircleInfo = {\n    fromRectWithPercentInnerRadius(rect: Rect, innerRadiusPerc: number){\n        const {x, y, width, height} = rect\n        const radius = Math.min(width, height) / 2\n        const innerRadius = (innerRadiusPerc * 0.01) * radius\n        const center = {x: x + width/2, y: y + height/2}\n        return { innerRadiusPerc, radius, innerRadius, center }\n    },\n    fromRectWithInnerRadius(rect:Rect, innerRadius: number){\n        const {x, y, width, height} = rect\n        const radius = Math.min(width, height) / 2\n        const innerRadiusPerc = innerRadius * 100 / radius\n        const center = {x: x + width/2, y: y + height/2}\n        return { innerRadiusPerc, radius, innerRadius, center }\n    }\n}\n", "\n/** @type {WeakMap<HTMLElement, CachedObserverOption[]>} */\nconst observerOptionsMap = new WeakMap();\n\nconst trimQuotesRegex = /^[\"'](.+(?=[\"']$))[\"']$/\nexport const cleanPropertyValue = propValue => {\n    if(typeof propValue !== \"string\"){\n        return \"\"\n    }\n    const trimmed = propValue.trim();\n    return trimmed.replace(trimQuotesRegex, '$1');\n\n}\n\nconst resizeObserver = new ResizeObserver(entries => {\n    const targets = new Set(entries.map(entry => entry.target))\n    for (const target of targets) {\n        const host = target.getRootNode().host\n        const options = observerOptionsMap.get(host);\n        options.forEach(option => {\n            const computedStyle = getComputedStyle(host)\n            const newValue = cleanPropertyValue(computedStyle.getPropertyValue(option.customPropertyName))\n            if(option.currentPropertyValue !== newValue){\n                const callbackOptions = {\n                    target: host,\n                    previousValue: option.currentPropertyValue,\n                    value: newValue\n                }\n                option.currentPropertyValue = newValue\n                option.executeCallback(callbackOptions)\n            }\n        })\n    }\n});\n\n\nconst templateCache = {}\n\nconst createTemplate = (name) => {\n    if(!templateCache[name]){\n        const template = document.createElement(\"template\")\n        template.innerHTML = `<style class=\"css-watch-observer__${name}\">\n        .css-watch-observer__${name}--target {\n            font-size: 1rem;\n            display: inline-block;\n            visibility: hidden;\n            position: absolute;\n            z-index: -10000;\n            pointer-events: none\n        }\n    \n        .css-watch-observer__${name}--target::before {\n            content: var(${name})\n        }            \n        </style>\n        <span class=\"css-watch-observer__${name} css-watch-observer__${name}--target\"></span>\n        `\n        templateCache[name] = template \n    }\n\n    return templateCache[name]\n}\n\n/**\n * \n * @param {string} name \n * @param {function} callback \n * @returns {Observer}\n */\nexport function shadowDomCustomCssVariableObserver(name, callback){\n    const template = createTemplate(name)\n    return {\n        observe: (element) => {\n            const observerOptions = observerOptionsMap.get(element) || []\n            const observerOptionsWithName = observerOptions.filter(option => option.customPropertyName === name)\n\n            if(observerOptionsWithName.length <= 0){\n                element.shadowRoot.append(document.importNode(template.content, true))\n                const elementToObserve = element.shadowRoot.querySelector(`.css-watch-observer__${name}--target`)\n                resizeObserver.observe(elementToObserve)    \n            }\n\n            observerOptionsMap.set(element, [...observerOptions, {\n                currentPropertyValue: cleanPropertyValue(getComputedStyle(element).getPropertyValue(name)),\n                executeCallback: callback,\n                customPropertyName: name\n            }])\n        },\n\n        unobserve: (element) => {\n            const observerOptions = observerOptionsMap.get(element) || []\n            const newObserverOptions = observerOptions.filter(option => option.executeCallback !== callback || option.customPropertyName !== name )\n            const newObserverOptionsWithName = newObserverOptions.filter(option => option.customPropertyName === name)\n            if(newObserverOptionsWithName.length <= 0){\n                const elementToObserve = element.shadowRoot.querySelector(`.css-watch-observer__${name}--target`)\n                resizeObserver.unobserve(elementToObserve)\n                element.shadowRoot.querySelectorAll(`.css-watch-observer__${name}`).forEach(el => el.remove())\n            }\n            observerOptionsMap.set(element, newObserverOptions)\n        }\n    }\n\n\n}\n\n/** \n * @typedef {object} ObserverOption \n * @property {string[]} acceptValues\n * @property {function} executeCallback\n * @property {string} currentPropertyValue\n * @property {string} customPropertyName\n * \n * @typedef {object} Observer\n * @property {(element: HTMLElement) => void} observe\n * @property {(element: HTMLElement) => void} unobserve\n * */\n", "import { calculateDistanceBetween2Points, CircleInfo } from './geometry.js'\nimport {shadowDomCustomCssVariableObserver, cleanPropertyValue} from './observe-css-var.feature.js'\nimport html from './color-wheel.element.html'\nimport css from './color-wheel.element.css'\n\nlet loadTemplate = () => {\n  const templateElement = document.createElement(\"template\")\n  templateElement.innerHTML = html\n  loadTemplate = () => templateElement\n  return templateElement\n}\n\nlet loadStyles = () => {\n  const sheet = new CSSStyleSheet();\n  sheet.replaceSync(css);\n  loadStyles = () => sheet\n  return sheet\n}\n  \n\n  /**\n   * \n   * @param {ColorWheelElement} element \n   */\n  function updateContainerClass(element){\n    const container = element.shadowRoot.querySelector('.container')\n    const {uiMode} = element\n    container.classList.toggle('container--desktop-ui', uiMode === 'desktop')\n    container.classList.toggle('container--mobile-ui', uiMode === 'mobile')\n  }\n\n\n  const uiModeObserver = shadowDomCustomCssVariableObserver('--ui-mode', ({target}) => updateContainerClass(target))\n  const defaultUiModeObserver = shadowDomCustomCssVariableObserver('--default-ui-mode', ({target}) => updateContainerClass(target))\n  \n  class ColorWheelElement extends HTMLElement {\n    constructor(){\n      super()\n      const shadowRoot = this.attachShadow({ mode: 'open' })\n      shadowRoot.adoptedStyleSheets = [loadStyles()]\n      const template = loadTemplate()\n\n      shadowRoot.append(document.importNode(template.content, true))\n      const wheelContainer = shadowRoot.querySelector('.color-wheel-container')\n      const innerRadiusCalc = shadowRoot.querySelector('.inner-radius-calc')\n      const wheel = shadowRoot.querySelector('.color-wheel')\n      const slider = shadowRoot.querySelector('.slider')\n      const wheelStyle = window.getComputedStyle(wheel)\n            \n      uiModeObserver.observe(this)\n      defaultUiModeObserver.observe(this)\n      updateContainerClass(this)\n      reflectLightness(this)\n      reflectValue(this)\n\n      const getWheelCenterPoint = () => {\n          const pointerBox = wheelContainer.getBoundingClientRect();\n          const centerPoint = wheelStyle.transformOrigin;\n          const centers = centerPoint.split(\" \");\n          const centerY = pointerBox.top + parseInt(centers[1]);\n          const centerX = pointerBox.left + parseInt(centers[0]);\n          return { x: centerX, y: centerY }\n      }\n\n      const getRadiusValues = () => {\n        const pointerBox = wheelContainer.getBoundingClientRect();\n          const innerRadiusCSSValue = wheelStyle.getPropertyValue(\"--inner-radius\").trim()\n          if(/[0-9]+%/g.test(innerRadiusCSSValue)){\n            const innerRadiusPerc = parseInt(innerRadiusCSSValue)\n            return CircleInfo.fromRectWithPercentInnerRadius(pointerBox, innerRadiusPerc)\n          }\n          const innerRadius = innerRadiusCalc.getBoundingClientRect().width\n          return CircleInfo.fromRectWithInnerRadius(pointerBox, innerRadius)\n      }\n\n      const initDrag = (callback) => {\n          const defaultPrevented = e => { e.preventDefault(); e.stopPropagation(); callback(e) } \n          globalThis.addEventListener(\"pointermove\", defaultPrevented, {capture: true})\n          globalThis.addEventListener(\"pointerup\", () => {\n            globalThis.removeEventListener(\"pointermove\", defaultPrevented, {capture: true})\n          }, { once: true, capture: true })\n      }\n\n      const fromCenterPointAndRadius = ({ centerPoint, innerRadiusPerc, radius }) => ({\n          calculateSaturationFromMouseEvent(event) {\n              const r = calculateDistanceBetween2Points(centerPoint,  { x: event.clientX, y: event.clientY })\n              const rperc = Math.min(100, Math.max(0, r * 100 / radius))\n              return Math.round(Math.min(100, Math.max(0, (rperc - innerRadiusPerc) * 100 / (100 - innerRadiusPerc))))\n          }\n      })\n\n      const initSliderDrag = () => {\n          const centerPoint = getWheelCenterPoint()\n          const calculations = fromCenterPointAndRadius({\n              ...getRadiusValues(),\n              centerPoint\n          })\n\n          const slideSaturation = (e) => {\n              this.saturation = calculations.calculateSaturationFromMouseEvent({\n                clientX: centerPoint.x,\n                clientY: Math.min(centerPoint.y, e.clientY)\n              })\n              const event = new CustomEvent(\"input\", { bubbles: true })\n              this.dispatchEvent(event)\n          }\n          initDrag(slideSaturation)\n      }\n\n      const initWheelDrag = (clientCoordinates) => {\n          const centerPoint = getWheelCenterPoint()\n          const { hue } = this\n          const calculations = fromCenterPointAndRadius({\n              ...getRadiusValues(),\n              centerPoint\n          })\n\n          const getAngle = (e) => {\n              const delta_x =  e.clientX - centerPoint.x\n              const delta_y = centerPoint.y - e.clientY\n              const theta_radians = Math.atan2(delta_y, delta_x)\n              return theta_radians * -180/Math.PI \n          }\n\n          const initDeg = getAngle(clientCoordinates)\n          const uiMode = this.uiMode\n\n          if((uiMode || \"\").trim() === \"mobile\") {\n              const rotateWheel = (e) => {\n                  const deg = getAngle(e) \n                  const newHue = Math.round(deg - initDeg + hue + 360) % 360\n                  this.hue = newHue\n                  const event = new CustomEvent(\"input\", { bubbles: true })\n                  this.dispatchEvent(event)    \n              }\n              initDrag(rotateWheel)\n              \n          } else {\n              const rotateSlider = (e) => {\n                  const deg = getAngle(e) \n                  const newHue = Math.round(-deg + 360 * 2 - 90) % 360\n                  this.hue = newHue\n                  this.saturation = calculations.calculateSaturationFromMouseEvent(e)\n                  const event = new CustomEvent(\"input\", { bubbles: true })\n                  this.dispatchEvent(event)              \n              }\n\n              initDrag(rotateSlider)\n          }\n      }\n\n      wheel.addEventListener(\"pointerdown\", (event)  => {\n          event.preventDefault()\n          event.stopPropagation()\n          initWheelDrag(event)\n      })\n\n      slider.addEventListener(\"pointerdown\", (event) => {\n          event.preventDefault()\n          event.stopPropagation()\n          initSliderDrag()\n      })\n\n      reflectSaturation(reflectHue(this))\n    }\n\n    static get observedAttributes(){\n        return [\"saturation\", \"hue\", \"lightness\", \"value\"]\n    }\n\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if(oldValue === newValue) return \n        switch(name){\n          case \"saturation\": return reflectSaturation(this)\n          case \"hue\": return reflectHue(this)\n          case \"lightness\": return reflectLightness(this)\n          case \"value\": return reflectValue(this)\n        }\n      }\n\n  get uiMode(){\n    const computedStyle = getComputedStyle(this.shadowRoot.querySelector('.container'))\n    const uiMode = cleanPropertyValue(computedStyle.getPropertyValue(\"--ui-mode\"));\n    switch(uiMode){\n      case 'desktop':\n      case 'mobile':\n        return uiMode\n    }\n    return cleanPropertyValue(computedStyle.getPropertyValue(\"--default-ui-mode\"))\n\n  }\n\n  get hue(){\n    const asInt = parseInt(this.getAttribute(\"hue\"))\n    return isNaN(asInt) ? 0 : asInt\n  }\n\n  set hue(hue){\n    this.setAttribute(\"hue\", hue)\n  }\n\n  get saturation(){\n    const asInt = parseInt(this.getAttribute(\"saturation\"))\n    return isNaN(asInt) ? 0 : asInt\n  }\n\n  set saturation(saturation){\n    this.setAttribute(\"saturation\", saturation)\n  }\n\n  get value(){\n    const asInt = parseInt(this.getAttribute(\"value\"))\n    return isNaN(asInt) ? 100 : asInt\n  }\n\n  set value(value){\n      this.setAttribute(\"value\", value)\n  }\n\n  get lightness(){\n    const asInt = parseInt(this.getAttribute(\"lightness\"))\n    return isNaN(asInt) ? 50 : asInt\n  }\n\n  set lightness(lightness){\n    this.setAttribute(\"lightness\", lightness)\n  }\n}\n\nconst getContainer = element => element.shadowRoot.querySelector('.container')\nconst setContainerProperty = (element, property, value) => {\n  getContainer(element)?.style.setProperty(property, value)\n  return element\n}\n\nfunction reflectHsl(element){\n  const container = getContainer(element)\n  if(!container){ return }\n  const setHSLMode = element.hasAttribute(\"lightness\") && !element.hasAttribute(\"value\")\n  container.classList.toggle(\"container--hsl\", setHSLMode)\n}\n\nconst reflectHue = element => setContainerProperty(element, \"--hue\", element.hue)\nconst reflectSaturation = element => setContainerProperty(element, \"--saturation\", element.saturation)\nconst reflectLightness = element => (reflectHsl(element), setContainerProperty(element, \"--lightness\", element.lightness))\nconst reflectValue = element => (reflectHsl(element), setContainerProperty(element, \"--value\", element.value))\n\n  \nconst url = new URL(import.meta.url)\nconst elementName = url.searchParams.get('named')\nif(elementName){\n    if (customElements.get(elementName) != null){\n        console.error(`A custom element with name \"${elementName}\" already exists`)\n    } else {\n        customElements.define(elementName, ColorWheelElement)\n    }\n}\n  "],
  "mappings": "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",
  "names": ["calculateDistanceBetween2Points", "x1", "y1", "x2", "y2", "CircleInfo", "rect", "innerRadiusPerc", "x", "y", "width", "height", "radius", "innerRadius", "center", "observerOptionsMap", "trimQuotesRegex", "cleanPropertyValue", "propValue", "resizeObserver", "entries", "targets", "entry", "target", "host", "option", "computedStyle", "newValue", "callbackOptions", "templateCache", "createTemplate", "name", "template", "shadowDomCustomCssVariableObserver", "callback", "element", "observerOptions", "elementToObserve", "newObserverOptions", "el", "loadTemplate", "templateElement", "color_wheel_element_default", "loadStyles", "sheet", "updateContainerClass", "element", "container", "uiMode", "uiModeObserver", "shadowDomCustomCssVariableObserver", "target", "defaultUiModeObserver", "ColorWheelElement", "shadowRoot", "template", "wheelContainer", "innerRadiusCalc", "wheel", "slider", "wheelStyle", "reflectLightness", "reflectValue", "getWheelCenterPoint", "pointerBox", "centers", "centerY", "getRadiusValues", "innerRadiusCSSValue", "innerRadiusPerc", "CircleInfo", "innerRadius", "initDrag", "callback", "defaultPrevented", "e", "fromCenterPointAndRadius", "centerPoint", "radius", "event", "r", "calculateDistanceBetween2Points", "rperc", "initSliderDrag", "calculations", "initWheelDrag", "clientCoordinates", "hue", "getAngle", "delta_x", "delta_y", "initDeg", "deg", "newHue", "reflectSaturation", "reflectHue", "name", "oldValue", "newValue", "computedStyle", "cleanPropertyValue", "asInt", "saturation", "value", "lightness", "getContainer", "setContainerProperty", "property", "reflectHsl", "setHSLMode", "url", "elementName"]
}
